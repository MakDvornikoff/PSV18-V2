
Дворников М.А.PSV18 - V2

Курс «Язык программирования C»
Домашнее задание из методички "Урок 8"

1. Написать функцию, которая получает в качестве ар -
гументов целое положительное число и систему счисле -
ния, в которую это число должно переводится(системы
	счисления от 2 до 36).Например, при переводе числа 27 в
	систему счисления 16 должно получиться 1B; 13 в 5 - ю —
	23; 35 в 18 - ю — 1H.
	2. Игра «кубики».Условие: имеется два игральных
	кубика со значениями от 1 до 6. Игра происходит с ком -
	пьютером, кубики бросаются поочередно.Побеждает тот,
	у кого сумма выпавших очков по итогам пяти бросков
	больше.Предусмотрите возможность получения первого
	хода человеком или компьютером.Кубики отображаются
	с помощью символов.В конце игры необходимо выводить
	среднюю сумму по броскам для обоих участников.


// ДЗ 1 =================================================
#include <iostream>
#include <stdlib.h>
#include <time.h>
	using namespace std;

int const maxSystema = 36; // максимально возможная система исчисления
char MyASCII(int); //Возвращает цифру или символ в системе исчесления. В Компьютерной ASCII 9 и A "разорваны" промежутком сиволов.
void convert(int, int); //Рекурсивная функция конвертирования. Рекурсия необходима для "переворота" числа при выводе в строку.
void convert2(int, int); //Вариант с массивом. Есть ограничения - длина массива

void main()
{
	setlocale(LC_ALL, "RUSSIAN");

	cout << "Для выхода введите '0'\n\n";
	while (1)
	{
		cout << "Число > "; int val;	cin >> val; if (!val) break;
		cout << "Система > "; int  sys; cin >> sys; if (sys<2) break;
		cout << "в системе = ";	convert(val, sys);
		cout << "\n---------------\n";
	}
}

char MyASCII(int n) { return (n < 10) ? (char)(n + 48) : (char)(n + 55); }

void convert(int Value, int Systema) {  //рекурсивная функция. Выводит цифры в последовательности наоборот. Без промежуточного массива.
	if (Value>(Systema - 1)) convert((Value / Systema), Systema);
	cout << MyASCII(Value%Systema);
}
// конец кода




//================ Код ниже относится только к варианту 2 =============================

//=================Вариант 2 ====  Вариант с массивом. Есть ограничения - длина массива.
void convert2(int Value, int Systema)
{
	const int size = 30;
	char ch[size];
	int i = 0;
	while (Value)
	{
		ch[i] = MyASCII(Value%Systema);  Value /= Systema; i++;
	}
	while (i)
	{
		i--; cout << ch[i];
	}
}



// ДЗ 2 =================================================

#include <iostream>
#include <stdlib.h>
#include <time.h>
using namespace std;

int const CountCast = 5;		 //Количество ходов

int OneCast(void);				 //Бросок Одного Кубика возвращает случайное число 1..6
void DoubleCastAndPrint(void);	 //Бросок 4х Кубиков и вывод на экран
void PrintHumaComp(bool);		 //Выводим "Человек Комп" или наоборот, в зависимости от IsHuma==True
void PrintLineCube(int, int);	 //Вывод на экран Одной строчки Одного кубика . Необходим из-за особенности вывода на экран
int P1 = 0, P2 = 0;				 //Переменные для первого и второго броска. Не привязаны ни к Компьютеру ни к Человеку. Накопительные для 5-ти бросков
								 //Переменные глобальные из-за построчного вывода на экран 4-х кубиков (для наглядности).Один вызов, Два возвращаемых параметра.						

void main()
{
	srand(time(NULL));
	setlocale(LC_ALL, "RUSSIAN");

	bool IsHuma;

	while (P1 == P2) //первый бросок с выбором бросающего. по итогам этого броска назначается приоритет бросающей в последующих 5-ти бросках (при CountCast=5 ).
	{
		cout << "Кто первый бросает ?\n\n<1>-Человек <0>-Компьютер >";
		cin >> IsHuma; cout << "\n";
		PrintHumaComp(IsHuma);						//Выводим "Человек Комп" или наоборот, в зависимости от IsHuma==True
		P1 = P2 = 0;
		DoubleCastAndPrint();						//Два броска Двух Кубиков с выводом на экран		
		if (P1 == P2) cout << "Ничья,  необходимо перебросить..\n\n";	 //Если ничья, перебрасываем кубики		
	}

	IsHuma = !(IsHuma ^ (P1 > P2));					//Присваиваем Признак Победителя (для "нулевого" броска) . Если True, значит победил Человек 
	cout << "\n\n"; PrintHumaComp(IsHuma);							//Выводим "Человек Компьютер" или наоборот, в зависимости от IsHuma==True
	P1 = P2 = 0;									//Обнуляем переменные. Дальше в них будем суммировать броски
	for (int i = 0; i < CountCast; i++)				//Бросаем CountCast (=5) раз кубики в цикле. Сначала Первый игрок, потом Второй. И так 5 раз.
	{
		DoubleCastAndPrint(); cout << "\n\n";		//Два броска Двух Кубиков Для левой и правой позиции (первого и второго игрока)
	}												//Суммируем в накопитель значения бросков в самой функции		

	cout << "\t          Средний счёт\n";
	cout << "\t    ----------------------------\n";
	for (int i = 0; i < 2; i++, IsHuma = !IsHuma) if (IsHuma) cout << "\t      Человек"; else cout << "\t      Компьютер";  //Выводим "Человек Комп" или наоборот, в зависимости от IsHuma==True
	cout << "\n\t         " << ((double)(P1) / CountCast);					//Выводим средний счёт Игрока 1
	cout << "\t         " << ((double)(P2) / CountCast) << "\n";				//Выводим средний счёт Игрока 2

	cout << "\n\t        Выиграл :  ";
	IsHuma = !(IsHuma ^ (P1 > P2));					//Определяем победителя при IsHuma==True, победил человек
	if (P1 == P2) cout << "НИЧЬЯ!\n\n";				//Но бывает и ничья
	else if (IsHuma) cout << "Человек\n\n"; else cout << "Компьютер\n\n"; //Выводим на экран победителя
}

void DoubleCastAndPrint(void)
{
	int c1, c2, c3, c4;
	c1 = (OneCast()); c2 = OneCast();   //Бросок двух кубиков Первым Игроком
	c3 = (OneCast()); c4 = OneCast();	//Бросок двух кубиков Вторым Игроком
	P1 += c1 + c2; P2 += c3 + c4;		//Накапливаем счёт

	for (int i = 0; i < 5; i++)			//перебор линий кубика. Кубик из 5-ти линий (кубик 5*5 учитывая границы)
	{
		cout << "  "; PrintLineCube(c1, i); //вывод линии символов первого кубика для Игрока1
		cout << "  "; PrintLineCube(c2, i);	//вывод линии символов второго кубика для Игрока1
		cout << "       ";
		cout << "  "; PrintLineCube(c3, i); //вывод линии символов первого кубика для Игрока2
		cout << "  "; PrintLineCube(c4, i);	//вывод линии символов второго кубика для Игрока2
		cout << "\n";
	}

}

int OneCast(void) { return((rand() % (6)) + 1); } //один бросок одного кубика

void PrintHumaComp(bool IsHuma)  //Вывод на экран позиций игроков Человек/Компьютер
{
	for (int i = 0; i < 2; i++, IsHuma = !IsHuma) if (IsHuma) cout << "         Человек              "; else cout << "       Компьютер             ";
	cout << "\n\n";
}


void PrintLineCube(int Value, int Line) //отрисовывается одна линия кубика
{
	//Кодируем 6 значений кубика в массив, в двоичном виде
	const int cube[6][3]{ { 0b000,0b010,0b000 },{ 0b100, 0b000, 0b001 } ,{ 0b100, 0b010, 0b001 },{ 0b101, 0b000, 0b101 },{ 0b101, 0b010, 0b101 },{ 0b101, 0b101, 0b101 } };
	for (int i = 0; i < 5; i++)			//5 столбцов (кубик 5*5 с учётом границ кубика)
	{
		if (Line == 0 || Line == 4)
			if (i == 4) cout << "-";	//границы кубика
			else cout << "--";			//границы кубика
		else if (i == 0)cout << "|";	//границы кубика
		else if (i == 4)cout << " |";	//границы кубика
		else if ((cube[Value - 1][Line - 1] << (i - 1)) & 0b100) cout << " *"; else cout << "  "; //Вывод символов кубика из массива с помощью побитового сдвига и маски
	}
}